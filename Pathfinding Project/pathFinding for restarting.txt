
import math
from queue import PriorityQueue

WIDTH = 800
WIN = pygame.display.set_mode((WIDTH, WIDTH))
pygame.display.set_caption("A* Path Finding Algorithm")

RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 255, 0)
YELLOW = (255, 255, 0)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
PURPLE = (128, 0, 128)
ORANGE = (255, 165, 0)
GREY = (128, 128, 128)
TURQUOISE = (64, 224, 208)

class Spot:
    def __init__(self, row, col, width, total_rows):
        self.row = row
        self.col = col
        self.x = row * width
        self.y = col * width
        self.color = WHITE
        self.neighbors = []
        self.width = width
        self.total_rows = total_rows

    def get_pos(self):
        return self.row, self.col

    def is_closed(self):
        return self.color == RED

    def is_open(self):
        return self.color == GREEN

    def is_barrier(self):
        return self.color == BLACK

    def is_start(self):
        return self.color == ORANGE

    def is_end(self):
        return self.color == TURQUOISE

    def reset(self):
        self.color == WHITE

    def make_start(self):
        self.color = ORANGE

    def make_closed(self):
        self.color = RED

    def make_open(self):
        self.color = GREEN

    def make_barrier(self):
        self.color = BLACK

    def make_end(self):
        self.color = TURQUOISE

    def make_path(self):
        self.color = PURPLE

    def draw(self, win):
        pygame.draw.rect(win, self.color, (self.x, self.y, self.width, self.width))

    def update_neighbors(self, grid):
        pass

    def __lt__(self, other):
        return False


def h(point1, point2):      # use manhattan distance, cannot move on diagonals
    x1, y1 = point1     # can split the point variables into x and y
    x2, y2 = point2
    return abs(x1 - x2) + abs(y1 - y2)


def make_grid(rows, width):     # make the grid and assign nodes to grid
    grid = []
    gap = width // rows  # width of entire grid divided by how many rows we have
    for i in range(rows):
        grid.append([])  # append empty list to grid
        for j in range(rows):
            spot = Spot(i, j, gap, rows)  # pass the Node class to node
            grid[i].append(spot)  # append node with information to the grid at row i

    return grid


def draw_grid(win, rows, width):
    gap = width // rows
    for i in range(rows):     # draw horizontal lines
        pygame.draw.line(win, GREY, (0, i * gap), (width, i * gap))
        for j in range(rows):
            pygame.draw.line(win, GREY, (j * gap, 0), (j * gap, width))


def draw(win, grid, rows, width):
    win.fill(WHITE)

    for row in grid:
        for spot in row:
            spot.draw(win)

    draw_grid(win, rows, width)
    pygame.display.update()


def get_clicked_pos(pos, rows, width):
    gap = width // rows
    y, x = pos

    row = y // gap
    col = x // gap

    return row, col


def main(win, width):
    ROWS = 50
    grid = make_grid(ROWS, width)

    start = None
    end = None

    run = True
    started = False
    while run:
        draw(win, grid, ROWS, width)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:  # exit the pathfinder
                run = False

            if started:  # once started the user can't interfere with pathfinding
                continue

            if pygame.mouse.get_pressed()[0]:  # press left mouse button
                pos = pygame.mouse.get_pos()  # gives us the x and y coordinate of the mouse
                row, col = get_clicked_pos(pos, ROWS, width)  # assign mouse position to row(x) and col(y)
                spot = grid[row][col]  # row and col assigned to the node
                if not start:  # first left click with mouse is the start node
                    start = spot
                    start.make_start()

                elif not end:  # second left click with mouse is the end node
                    end = spot
                    end.make_end()

                elif spot != end and spot != start:     # third click makes barrier
                    spot.make_barrier()

            elif pygame.mouse.get_pressed()[2]:  # press right mouse button
                pass

        pygame.quit()

main(WIN, WIDTH)
